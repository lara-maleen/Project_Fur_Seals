ceiling(runif(1, 2))
ceiling(runif(10,1, 2))
ceiling(runif(10,1, 2))
ceiling(runif(10,1,2))
floor(runif(3, min=1, max=2))
floor(runif(3, min=1, max=2))
runif(3, min=1, max=2)
ceiling(runif(3, min=1, max=2))
ceiling(runif(3, min=0, max=2))
ceiling(runif(3, min=0, max=2))
ceiling(runif(3, min=0, max=2))
ceiling(runif(3, min=0, max=2))
ceiling(runif(3, min=0, max=2))
ceiling(runif(3, min=0, max=2))
rm(list=ls())
##### START SIMULATION.RUN-FUNCTION #####
replicates=1 #number of replicates
time=100 #number of generations
migrate=0.05 #migrationfactor
age=2 #age limit for an individual
patches=2 #number of Patches (two different sites: high/low density)
territories=50 #number of territories per patch
mutate=0.05 #mutationfactor
die=0.05
a=0.49649467
b=1.47718931
c1=0.72415095
c2=-0.24464625
c3=0.99490196
c5=-0.06855583
c4=-1.31337296
c6 = 0.32833236
c7=-20.88383990
c8=-0.66263785
c9=2.39334027
c10=0.11670283
switch(Sys.info()['user'],
Lara = {setwd("C:/Users/Lara/Documents/Studium/WHK/WHK Bielefeld Meike/Project_Fur_Seals/")})
source('Gene_generator.R')
fitness.fun <- function(a,b,z,N,Np){ #FITNESS-FUNCTION (a,b = coefficients to change function, z = trait value, N= total pop size, Np = pop size of patch)
y=a+b*plogis(c1+c2*N+c3*z+c4*(0.5*N-Np)+c5*N^2+c6*z^2+c7*(0.5*N-Np)^2+c8*z*N+c9*z*(0.5*N-Np)+c10*N*(0.5*N-Np))
return(y)
}
ID.fun <- function(offspring.vector){ #ID-FUNCTION
ID.offspring <-   ID.scan:(ID.scan+sum(offspring.vector)-1)
ID.scan <<- ID.scan + sum(offspring.vector)
return(ID.offspring)
}
trait.fun <- function(row,pop.matrix,value.matrix,loci.matrix){ #TRAIT-VALUE-FUNCTION - Male quality
value.matrix <- matrix(NA,nrow=row,ncol=10) #empty matrix for the trait values for each loci
for(y in 1:row){ #for each individual
for(z in 1:10){
value.matrix[y,z] <- gen_phen_map[z,loci.matrix[y,z],loci.matrix[y,10+z]]
}
pop.matrix[y,4] <- abs(sum(value.matrix[y,]))
}
return(pop.matrix)
}
statistic.fun <- function(pop.matrix, Npatch){ #PATCH/STATISTIC-FUNCTION
tmp <- aggregate(pop.matrix$trait,by=list(patch = pop.matrix$patch),mean)
traits <- tmp$x[match(1:Npatch,tmp$patch)]
cbind(table(factor(pop.matrix$patch,levels=1:Npatch)),
table(factor(pop.matrix[pop.matrix$gender=='male',]$patch,levels=1:Npatch)),
table(factor(pop.matrix[pop.matrix$gender=='female',]$patch,levels=1:Npatch)),
as.numeric(traits))
}
##### MATRICES FOR PLOTS ##### with 100 spaces for mean values (1 replicat, 100 years (time))
meantrait.matrix <- matrix(NA, nrow=replicates, ncol=time) #empty matrix for the mean trait value of the generations in each replicate
meanpopulation.matrix <- matrix(NA, nrow=replicates, ncol=time) #empty matrix for the mean populationsize of the generations in each replicate
meanN.patches.array <- array(NA,dim=c(patches,time,replicates)) #empty array for the populationsize of a patch of the generations in each replicate
meanM.patches.array <- array(NA,dim=c(patches,time,replicates)) #empty array for the populationsize of males of a patch of the generations in each replicate
meanF.patches.array <- array(NA,dim=c(patches,time,replicates)) #empty array for the populationsize of females of a patch of the generations in each replicate
##### INITIALISATION PATCHES #####
population.total <- c() #empty vector for the population matrix
statistic.total <- array(NA,dim=c(patches,4,time)) #empty array for the statistics
patchx.N <- abs(round(rnorm(1, mean=250, sd=10))) #Number of individuals in the patch
patchx.male <- round(runif(1,patchx.N/4,3*patchx.N/4)) #Number of males in the patch
ID <- c(1:(patchx.N)) #vector ID: gives each individual an ID
patch <- c(rep(k,patchx.N)) #vector patch: gives each individual their patch Nr.
gender <- c(rep("male",patchx.male),rep("female",patchx.N-patchx.male)) #vector gender: is filled with males and females
trait <- c(rep(0.5,patchx.N)) #vector trait: is for all individuals from both patches set as 0.5
survival <- c(rep(age,patchx.N)) #vector survival: is for all new individuals of both patches the pre defined age limit
ID.mother <- c(rep(NA,patchx.N)) #the first generation has no mother and therefore no ID in the column for the mothers ID
ID.father <- c(rep(NA,patchx.N)) #the first generation has no father and therefore no ID in the column for the fathers ID
k <-1
patchx.N <- abs(round(rnorm(1, mean=250, sd=10))) #Number of individuals in the patch
patchx.male <- round(runif(1,patchx.N/4,3*patchx.N/4)) #Number of males in the patch
ID <- c(1:(patchx.N)) #vector ID: gives each individual an ID
patch <- c(rep(k,patchx.N)) #vector patch: gives each individual their patch Nr.
gender <- c(rep("male",patchx.male),rep("female",patchx.N-patchx.male)) #vector gender: is filled with males and females
trait <- c(rep(0.5,patchx.N)) #vector trait: is for all individuals from both patches set as 0.5
survival <- c(rep(age,patchx.N)) #vector survival: is for all new individuals of both patches the pre defined age limit
ID.mother <- c(rep(NA,patchx.N)) #the first generation has no mother and therefore no ID in the column for the mothers ID
ID.father <- c(rep(NA,patchx.N)) #the first generation has no father and therefore no ID in the column for the fathers ID
patch_last_year <- ceiling(runif(patchx.N, min=0, max=2)) #generates randomly ID of last years patch for each individual (patch 1 or 2)
no_offspring <- c(rep(NA,patchx.N)) #no offspring in first generation, will be filled with males success/offspring from last year
patchx <- data.frame(ID,patch,gender,trait,survival,ID.mother,ID.father, patch_last_year, no_offspring) #the dataframe is constructed for each patch including all vectors which where defined just before
no_offspring
patch_last_year
patchx <- data.frame(ID,patch,gender,trait,survival,ID.mother,ID.father, patch_last_year, no_offspring) #the dataframe is constructed for each patch including all vectors which where defined just before
population.total <- rbind(population.total,patchx)  #data frame including all individuals of all patches (the dataframe of a patch is included in the population matrix)
population.total
population.total$ID <- c(1:nrow(population.total)) #the first generation of the population becomes a new ID
patchnumbers.vector <- c(1:patches) #vector of patchnumbers
ID.scan <- nrow(population.total)+1
##### STATISTIC START #####
population.N <- rep(0,time) #empty vector for the populationsize of each generation
population.meantrait <- rep(0,time) #empty vector for the mean traitvalue of each generation
population.N[1] <- nrow(population.total) #the populationsize for the first generation is written into the vector
population.meantrait[1] <- mean(population.total$trait) #the mean traitvalue for the first generation is written into the vector
population <- nrow(population.total) #number of individuals
loci.total <- matrix(NA,nrow=population,ncol=20+1) #empty matrix for the locis (20 numbers) and the ID of the individual (+1 number)
x <- 2 #Just for TEST
loci.total[x,] <- ceiling(runif(21,1e-16,10)) #each individual has 20 random numbers (first 10:row //last 10:column)
loci.total[x,21] <- x #the last vector-spot is defined as x (the ID of the individual) for the first generation
population.total <- trait.fun(population,population.total,values.population,loci.total) #traitvalue-function: traitvalues for the population are included and overwrite the population matrix
##### GENERATION LOOP START #####
t <- 1
N <- nrow(population.total) #number of individuals in total (all patches included)
N.local <- c() #empty vector for local populationsize
N.female <- subset(population.total,population.total$gender=="female") #number of female individuals in total
N.male <- subset(population.total,population.total$gender=="male") #number of male individuals in total
level.vector <- c() #empty vector
##### MALE PATCH CHOICE - WHICH PATCH THEY GO #####
patchbook_males <- c() #empty vector for patches males go - WRITE IT IN LATER!
N.male.patch <- table(factor(N.male$patch,levels = 1:patches)) #number of males in each patch (as a vector)
### FEMALE PATCH CHOICE ### After male patch and territory decision, because females arrive afterwards in nature
patchbook_females <- c() #empty vector for patch females go - WRITE IT IN LATER!
N.female.patch <- table(factor(N.female$patch,levels = 1:patches)) #number of females in each patch (as a vector)
### FEMALE CHOICE END ###
pls <- 1 #Just for TEST
level.vector <- c(level.vector,nlevels(subset(population.total,population.total$patch==pls)$gender)) #create a Vector which shows how many different arguments(levels) are in a vector
N.0 <- N/500
j <- 1 #Just for TEST
N.local <- c(N.local,nrow(subset(population.total,population.total$patch==j))/500) #vector of local population sizes
offspring.vector <- 2*rpois(nrow(N.female),fitness.fun(a,b,N.female$trait,N.0,N.local[N.female$patch])) #each female gets a random number of offspring based on the fitness-function
ID.offspring <- c() #empty vector for the ID of the offspring
patch.offspring <- c() #empty vector for the patch of the offspring
gender.offspring <- c() #empty vector for the gender of the offspring
trait.offspring <- c() #empty vector for the trait of the offspring
survival.offspring <- c() #each offspring gets the survival of the maximum age
ID.mother.offspring <- c() #empty vector for the mothers ID of the offspring
ID.father.offspring <- c() #empty vector for the fathers ID of the offspring
loci.offspring <- matrix(NA,nrow=sum(offspring.vector),ncol=21) #empty vector for the locis of the offspring
#### START LOOP PARTNERFINDING #####
patchbook <- c() #empty vector for the patchnumber of the offspring
genderbook <- c() #empty vector for the gender of the offspring
current.offspring <- 1 #counter that keeps track of how much offspring have emerged so far during the loop below
u <- 1 #Just for TEST
mother <- N.female$ID[u] #gives the ID of the mother
ID.mother.offspring <- c(ID.mother.offspring, rep(mother,offspring.vector[u])) #ID of the mother is written into the vector for all her offspring
###FATHER####
no_offspring_vector <- c() #empty vector for number of offspring per father
father <- sample(N.male$ID[N.male$patch==N.female$patch[u]],1) #sample the ID of one male which patchnumber is the same as the patchnumber of the mother
ID.father.offspring <- c(ID.father.offspring,rep(father,offspring.vector[u])) #ID of the father is written into the vector as often as he becomes offspring with the mother
no_offspring_vector <- sum(rep(ID.father.offspring,offspring.vector[u])) #counts of how many offspring one father/male have
no_offspring_vector
ID.father.offspring
father
c(ID.mother.offspring, rep(mother,offspring.vector[u]))
no_offspring_vector <- sum(rep(ID.father.offspring,offspring.vector[u])) #counts of how many offspring one father/male have
no_offspring_vector
population.total$no_offspring <- rep(ID.father.offspring,no_offspring_vector) #writing the number of offspring into the no_offspring columns, stored for one t
population.total$no_offspring
population.total
father <- sample(N.male$ID[N.male$patch==N.female$patch[u]],1) #sample the ID of one male which patchnumber is the same as the patchnumber of the mother
ID.father.offspring <- c(ID.father.offspring,rep(father,offspring.vector[u])) #ID of the father is written into the vector as often as he becomes offspring with the mother
population.total$no_offspring <- rep(ID.father.offspring,no_offspring_vector) #writing the number of offspring into the no_offspring columns, stored for one t
population.total$no_offspring
